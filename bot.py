import logging
import os
import tempfile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
from config import (
    TELEGRAM_BOT_TOKEN, GOOGLE_SHEETS_CREDENTIALS_FILE,
    SPREADSHEET_ID_MY, SPREADSHEET_ID_HER, SPREADSHEET_ID_COMMON
)
import json
import typing

from services.speech_service import SpeechService
from services.sheets_service import GoogleSheetsService
from services.category_service import CategoryService
from services.auth_decorator import require_auth, is_user_allowed

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# States for conversation
(
    WAITING_CATEGORY,
    WAITING_CONFIRMATION,
) = range(2)
print(GOOGLE_SHEETS_CREDENTIALS_FILE)
category_service = CategoryService()
# Initialize services
speech_service = SpeechService(category_service)
# –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
sheets_service = GoogleSheetsService()

import json
from config import (
    TELEGRAM_BOT_TOKEN, GOOGLE_SHEETS_CREDENTIALS_FILE,
    SPREADSHEET_ID_MY, SPREADSHEET_ID_HER, SPREADSHEET_ID_COMMON
)

SPREADSHEET_IDS = [SPREADSHEET_ID_MY, SPREADSHEET_ID_HER, SPREADSHEET_ID_COMMON]

def get_sheet_choices():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {–∏–º—è_—Ç–∞–±–ª–∏—Ü—ã: spreadsheet_id}"""
    return dict(sheets_service.get_available_sheets(SPREADSHEET_IDS))

ALLOWED_USERS_PATH = 'data/allowed_users.json'

# –£–¥–∞–ª—è—é USER_SHEETS_PATH –∏ –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–º—É

def load_allowed_users():
    try:
        with open(ALLOWED_USERS_PATH, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('allowed_users', [])
    except Exception:
        return []

def save_allowed_users(users):
    with open(ALLOWED_USERS_PATH, 'w', encoding='utf-8') as f:
        json.dump({"allowed_users": users}, f, ensure_ascii=False, indent=2)

def get_user_entry(user_id):
    users = load_allowed_users()
    for user in users:
        if user["user_id"] == user_id:
            return user
    return None

def get_spreadsheet_id_for_user(user_id):
    users = load_allowed_users()
    sheet_choices = get_sheet_choices()
    user = get_user_entry(user_id)
    if user is None:
        # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        raise Exception("User not allowed")
    # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–∏—Å—Ç ‚Äî –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    if not user.get("selected_sheet") or user["selected_sheet"] not in sheet_choices:
        user["selected_sheet"] = next(iter(sheet_choices.keys()))
        save_allowed_users(users)
    return sheet_choices[user["selected_sheet"]]




@require_auth
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º —á–µ–∫–∞\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü\n"
        "/categories - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "/delete - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å\n"
        "/select_table - –í—ã–±—Ä–∞—Ç—å, –≤ –∫–∞–∫—É—é —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üÜï –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, –≤ –∫–∞–∫—É—é Google –¢–∞–±–ª–∏—Ü—É –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: —Å–≤–æ—é –ª–∏—á–Ω—É—é –∏–ª–∏ –æ–±—â—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /select_table!"
    )
    await update.message.reply_text(welcome_message)


@require_auth
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_message = (
        "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü\n"
        "/categories - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "/delete - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –°—É–º–º–∞'"
    )
    await update.message.reply_text(help_message)


async def process_transaction_text(
    text: str,
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> typing.Awaitable[int]:
    transaction = speech_service.parse_transcription(text)
    logger.info(f"Transaction: {transaction}")

    if not transaction["amount"]:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É.")
        return ConversationHandler.END

    context.user_data["transaction"] = transaction

    if not transaction["category"]:
        keyboard = []
        categories = (
            category_service.get_categories("income")
            if transaction["type"] == "–î–æ—Ö–æ–¥"
            else category_service.get_categories("expense")
        )
        for category in categories:
            keyboard.append([
                InlineKeyboardButton(category, callback_data=f"category_{category}")
            ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}\n\n"
            f"–¢–∏–ø: {transaction['type']}\n"
            f"–°—É–º–º–∞: {transaction['amount']} —Ä—É–±.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=reply_markup,
        )
        return WAITING_CATEGORY

    return await confirm_transaction(update, context)


@require_auth
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle voice messages."""
    try:
        # Get voice file
        voice = await update.message.voice.get_file()

        # Create temporary file
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
            temp_filename = temp_file.name

        # Download voice file
        await voice.download_to_drive(temp_filename)

        # Transcribe voice to text
        transcribed_text = await speech_service.transcribe_voice(temp_filename)

        # Clean up temporary file
        os.unlink(temp_filename)

        if not transcribed_text:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return ConversationHandler.END
        logger.info(f"Transcribed text: {transcribed_text}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await process_transaction_text(transcribed_text, update, context)

    except Exception as e:
        logger.exception(e)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        return ConversationHandler.END


async def handle_category_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Handle category selection."""
    # Check authorization for callback queries
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        await update.callback_query.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True
        )
        return ConversationHandler.END

    query = update.callback_query
    await query.answer()

    # Get selected category
    category = query.data.replace("category_", "")
    context.user_data["transaction"]["category"] = category

    return await confirm_transaction(update, context)


async def confirm_transaction(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Ask for transaction confirmation."""
    # Check authorization for callback queries
    if update.callback_query:
        user_id = update.effective_user.id
        if not is_user_allowed(user_id):
            await update.callback_query.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True
            )
            return ConversationHandler.END

    transaction = context.user_data["transaction"]

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = (
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:\n\n"
        f"–¢–∏–ø: {transaction['type']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction['category']}\n"
        f"–°—É–º–º–∞: {transaction['amount']} —Ä—É–±.\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {transaction['comment']}"
    )

    if update.callback_query:
        await update.callback_query.message.edit_text(
            message, reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)

    return WAITING_CONFIRMATION


async def handle_confirmation(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Handle transaction confirmation."""
    # Check authorization for callback queries
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        await update.callback_query.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True
        )
        return ConversationHandler.END

    query = update.callback_query
    await query.answer()

    transaction = context.user_data["transaction"]
    base_message = (
        f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:\n\n"
        f"–¢–∏–ø: {transaction['type']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction['category']}\n"
        f"–°—É–º–º–∞: {transaction['amount']} —Ä—É–±.\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {transaction['comment']}\n\n"
    )

    if query.data == "confirm_yes":
        try:
            # Save transaction to Google Sheets
            spreadsheet_id = get_spreadsheet_id_for_user(user_id)
            sheets_service.add_transaction(
                spreadsheet_id=spreadsheet_id,
                transaction_type=transaction["type"],
                category=transaction["category"],
                amount=transaction["amount"],
                source="–ì–æ–ª–æ—Å",
                comment=transaction["comment"],
            )

            await query.message.edit_text(
                base_message + "‚úÖ –°—Ç–∞—Ç—É—Å: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                reply_markup=None,
            )

        except Exception as e:
            logger.exception(e)
            await query.message.edit_text(
                base_message + "‚ùå –°—Ç–∞—Ç—É—Å: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
                reply_markup=None,
            )

    else:
        await query.message.edit_text(
            base_message + "‚ùå –°—Ç–∞—Ç—É—Å: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None
        )

    # Clear user data
    context.user_data.clear()
    return ConversationHandler.END


@require_auth
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send statistics when the command /stats is issued."""
    try:
        user_id = update.effective_user.id
        spreadsheet_id = get_spreadsheet_id_for_user(user_id)
        stats = sheets_service.get_monthly_statistics(spreadsheet_id)

        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n\n"
            f"–î–æ—Ö–æ–¥—ã: {stats['total_income']:.2f} —Ä—É–±.\n"
            f"–†–∞—Å—Ö–æ–¥—ã: {stats['total_expense']:.2f} —Ä—É–±.\n"
            f"–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ –¥–µ–Ω—å: {stats['avg_daily_expense']:.2f} —Ä—É–±.\n\n"
            "–¢–æ–ø —Ä–∞—Å—Ö–æ–¥—ã:\n"
        )

        for category, amount in stats["top_expenses"]:
            message += f"‚Ä¢ {category}: {amount:.2f} —Ä—É–±.\n"

        await update.message.reply_text(message)

    except Exception as e:
        logger.exception(e)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@require_auth
async def categories_command(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Show categories when the command /categories is issued."""
    # TODO

    await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏...")


@require_auth
async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Delete last transaction when the command /delete is issued."""
    # TODO: Implement delete
    await update.message.reply_text("üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏...")


@require_auth
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle photos with QR codes."""
    # TODO: Implement QR code handling
    await update.message.reply_text("üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º...")


@require_auth
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle text messages."""
    text_msg = update.message.text
    return await process_transaction_text(text_msg, update, context)



@require_auth
async def select_table_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    sheet_choices = get_sheet_choices()
    user = get_user_entry(user_id)
    current = user["selected_sheet"] if user else None
    keyboard = []
    for name in sheet_choices:
        text = f"{'‚úÖ ' if name == current else ''}{name}"
        keyboard.append([
            InlineKeyboardButton(text, callback_data=f"select_table_{name}")
        ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í –∫–∞–∫—É—é —Ç–∞–±–ª–∏—Ü—É –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?",
        reply_markup=reply_markup
    )

async def select_table_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    sheet_choices = get_sheet_choices()
    users = load_allowed_users()
    user = None
    for u in users:
        if u["user_id"] == user_id:
            user = u
            break
    if not user:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
    sheet_name = query.data.replace("select_table_", "")
    if sheet_name not in sheet_choices:
        await query.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞", show_alert=True)
        return
    user["selected_sheet"] = sheet_name
    save_allowed_users(users)
    await query.answer()
    await query.edit_message_text(
        f"–ì–æ—Ç–æ–≤–æ. –í—Å–µ –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É: {sheet_name}",
    )


def main() -> None:
    """Start the bot."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è selected_sheet –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = load_allowed_users()
    sheet_choices = get_sheet_choices()
    
    for user in users: 
        user["selected_sheet"] = next(iter(sheet_choices.keys()))
            
    save_allowed_users(users)
    # –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç Summary, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    for spreadsheet_id in sheet_choices.values():
        sheets_service.ensure_summary_sheet(spreadsheet_id)
    # Create the Application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Create conversation handler for voice messages
    voice_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.VOICE, handle_voice)],
        states={
            WAITING_CATEGORY: [
                CallbackQueryHandler(handle_category_selection, pattern="^category_")
            ],
            WAITING_CONFIRMATION: [
                CallbackQueryHandler(handle_confirmation, pattern="^confirm_")
            ],
        },
        fallbacks=[],
    )

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("categories", categories_command))
    application.add_handler(CommandHandler("delete", delete_command))
    application.add_handler(voice_handler)
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
    )
    application.add_handler(CommandHandler("select_table", select_table_command))
    application.add_handler(CallbackQueryHandler(select_table_callback, pattern="^select_table_"))

    # Start the Bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
